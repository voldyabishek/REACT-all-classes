import React, { useEffect, useState } from "react";
import { motion, useTransform, useScroll,useAnimation } from "framer-motion";
import { useInView } from "react-intersection-observer";
import "./ScrollAnimations.css";

const Animatess = () => {
    const [scrollValue, setScrollValue] = useState(0);
    const [zoomComplete, setZoomComplete] = useState(false);
    const [contentZoom, setContentZoom] = useState(0);
    const [allowScroll, setAllowScroll] = useState(false);
  
    useEffect(() => {
      const handleScroll = (event) => {
        if (allowScroll) return; // Allow normal scrolling after full zoom
        event.preventDefault(); // Prevent default scrolling initially
  
        if (!zoomComplete) {
          // Phase 1: Zooming Image
          const newScrollValue = Math.min(1, Math.max(0, scrollValue + event.deltaY * 0.0015));
          setScrollValue(newScrollValue);
          if (newScrollValue >= 1) {
            setZoomComplete(true);
          }
        } else {
          // Phase 2: Zooming Content
          const newContentZoom = Math.min(1, Math.max(0, contentZoom + event.deltaY * 0.0015));
          setContentZoom(newContentZoom);
  
          if (newContentZoom >= 1) {
            setAllowScroll(true); // Allow normal scrolling after full zoom
          }
        }
      };
  
      window.addEventListener("wheel", handleScroll, { passive: false });
      return () => window.removeEventListener("wheel", handleScroll);
    }, [scrollValue, zoomComplete, contentZoom, allowScroll]);
  
    return (
      <div className={`container ${allowScroll ? "scroll-enabled" : ""}`}>
        {/* Zooming Image Section */}
        {!zoomComplete && (
          <motion.div
            className="zoom-image"
            style={{ scale: 1 + scrollValue * 1.5, opacity: 1 - scrollValue }}
          >
            <img src="vite.svg" alt="Vite Logo" />
          </motion.div>
        )}
  
        {/* Content Section Appears After Image Zoom */}
        <motion.div
          className="content"
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: zoomComplete ? 1 : 0, scale: zoomComplete ? 1 + contentZoom * 0.5 : 0.8 }}
          transition={{ duration: 0.6 }}
        >
          <h1>Vite React Scroll Animation</h1>
          <p>Keep scrolling to zoom in further and unlock normal scrolling.</p>
        </motion.div>
  
        {/* Third Section - Normal Scroll Starts Here */}
        {allowScroll && (
          <div className="third-section">
            <h2>Normal Scroll Unlocked</h2>
            <p>Now, normal page scrolling works as expected.</p>

            Lorem ipsum dolor sit amet consectetur adipisicing elit. Eum hic corrupti labore ullam pariatur consequatur est natus fugiat amet modi eligendi vero molestias odio, officiis reiciendis fugit exercitationem vitae. Rerum.
            lorem
          </div>
        )}
      </div>
    );
};

export default Animatess;
